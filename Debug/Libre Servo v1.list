
Libre Servo v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001388  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001510  08001510  00011510  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08001530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000028  08001558  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000004c  08001558  0002004c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   000086d5  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000156b  00000000  00000000  0002872d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d88  00000000  00000000  00029c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000318  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000940  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002737  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000257d  00000000  00000000  00030daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003332c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000728  00000000  00000000  000333a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014f8 	.word	0x080014f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080014f8 	.word	0x080014f8

080001c8 <LL_ADC_CommonInit>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80001c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80001cc:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80001ce:	07db      	lsls	r3, r3, #31
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE, CommonClock);
 80001d0:	bf5f      	itttt	pl
 80001d2:	6883      	ldrpl	r3, [r0, #8]
 80001d4:	680a      	ldrpl	r2, [r1, #0]
 80001d6:	f423 3340 	bicpl.w	r3, r3, #196608	; 0x30000
 80001da:	4313      	orrpl	r3, r2
 80001dc:	bf5a      	itte	pl
 80001de:	6083      	strpl	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 80001e0:	2001      	movpl	r0, #1
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80001e2:	2000      	movmi	r0, #0
  }
  
  return status;
}
 80001e4:	4770      	bx	lr

080001e6 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80001e6:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80001e8:	07db      	lsls	r3, r3, #31
{
 80001ea:	b510      	push	{r4, lr}
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80001ec:	d40d      	bmi.n	800020a <LL_ADC_Init+0x24>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80001ee:	e891 0018 	ldmia.w	r1, {r3, r4}
 80001f2:	68c2      	ldr	r2, [r0, #12]
 80001f4:	6889      	ldr	r1, [r1, #8]
 80001f6:	4323      	orrs	r3, r4
 80001f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80001fc:	430b      	orrs	r3, r1
 80001fe:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000202:	4313      	orrs	r3, r2
 8000204:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8000206:	2001      	movs	r0, #1
 8000208:	bd10      	pop	{r4, pc}
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800020a:	2000      	movs	r0, #0
  }
  return status;
}
 800020c:	bd10      	pop	{r4, pc}
	...

08000210 <LL_ADC_REG_Init>:
 8000210:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000212:	07db      	lsls	r3, r3, #31
{
 8000214:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000216:	d420      	bmi.n	800025a <LL_ADC_REG_Init+0x4a>
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000218:	684c      	ldr	r4, [r1, #4]
 800021a:	f8df c044 	ldr.w	ip, [pc, #68]	; 8000260 <LL_ADC_REG_Init+0x50>
 800021e:	f8d1 e000 	ldr.w	lr, [r1]
 8000222:	68cf      	ldr	r7, [r1, #12]
 8000224:	690e      	ldr	r6, [r1, #16]
 8000226:	694d      	ldr	r5, [r1, #20]
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000228:	b18c      	cbz	r4, 800024e <LL_ADC_REG_Init+0x3e>
    {
      MODIFY_REG(ADCx->CFGR,
 800022a:	68c3      	ldr	r3, [r0, #12]
 800022c:	688a      	ldr	r2, [r1, #8]
 800022e:	ea03 030c 	and.w	r3, r3, ip
 8000232:	ea43 030e 	orr.w	r3, r3, lr
 8000236:	4313      	orrs	r3, r2
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8000238:	433b      	orrs	r3, r7
 800023a:	4333      	orrs	r3, r6
 800023c:	432b      	orrs	r3, r5
 800023e:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000240:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000242:	f023 030f 	bic.w	r3, r3, #15
 8000246:	431c      	orrs	r4, r3
 8000248:	6304      	str	r4, [r0, #48]	; 0x30
  ErrorStatus status = SUCCESS;
 800024a:	2001      	movs	r0, #1
 800024c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(ADCx->CFGR,
 800024e:	68c2      	ldr	r2, [r0, #12]
 8000250:	ea02 020c 	and.w	r2, r2, ip
 8000254:	ea42 030e 	orr.w	r3, r2, lr
 8000258:	e7ee      	b.n	8000238 <LL_ADC_REG_Init+0x28>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800025a:	2000      	movs	r0, #0
  }
  return status;
}
 800025c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800025e:	bf00      	nop
 8000260:	fff0c03c 	.word	0xfff0c03c

08000264 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000268:	680a      	ldr	r2, [r1, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800026a:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800026e:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000272:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000276:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000278:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800027a:	fa32 f304 	lsrs.w	r3, r2, r4
 800027e:	d10d      	bne.n	800029c <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000280:	684b      	ldr	r3, [r1, #4]
 8000282:	3b01      	subs	r3, #1
 8000284:	2b01      	cmp	r3, #1
 8000286:	d806      	bhi.n	8000296 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000288:	6843      	ldr	r3, [r0, #4]
 800028a:	68c9      	ldr	r1, [r1, #12]
 800028c:	ea23 0302 	bic.w	r3, r3, r2
 8000290:	434a      	muls	r2, r1
 8000292:	431a      	orrs	r2, r3
 8000294:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8000296:	2001      	movs	r0, #1
 8000298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800029c:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 80002a0:	4013      	ands	r3, r2
 80002a2:	d069      	beq.n	8000378 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80002a4:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80002a8:	f8d0 9000 	ldr.w	r9, [r0]
 80002ac:	fa93 fca3 	rbit	ip, r3
 80002b0:	fabc fc8c 	clz	ip, ip
 80002b4:	fa93 f6a3 	rbit	r6, r3
 80002b8:	fab6 f686 	clz	r6, r6
 80002bc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80002c0:	fa05 fc0c 	lsl.w	ip, r5, ip
 80002c4:	0076      	lsls	r6, r6, #1
 80002c6:	ea29 0c0c 	bic.w	ip, r9, ip
 80002ca:	fa08 f606 	lsl.w	r6, r8, r6
 80002ce:	ea4c 0606 	orr.w	r6, ip, r6
 80002d2:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80002d4:	f108 36ff 	add.w	r6, r8, #4294967295
 80002d8:	2e01      	cmp	r6, #1
 80002da:	d816      	bhi.n	800030a <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80002dc:	6886      	ldr	r6, [r0, #8]
 80002de:	fa93 fca3 	rbit	ip, r3
 80002e2:	fabc fc8c 	clz	ip, ip
 80002e6:	fa93 f9a3 	rbit	r9, r3
 80002ea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80002ee:	fa05 fc0c 	lsl.w	ip, r5, ip
 80002f2:	ea26 0c0c 	bic.w	ip, r6, ip
 80002f6:	fab9 f989 	clz	r9, r9
 80002fa:	688e      	ldr	r6, [r1, #8]
 80002fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8000300:	fa06 f609 	lsl.w	r6, r6, r9
 8000304:	ea4c 0606 	orr.w	r6, ip, r6
 8000308:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800030a:	68c6      	ldr	r6, [r0, #12]
 800030c:	fa93 fca3 	rbit	ip, r3
 8000310:	fabc fc8c 	clz	ip, ip
 8000314:	fa93 f9a3 	rbit	r9, r3
 8000318:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800031c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8000320:	ea26 0c0c 	bic.w	ip, r6, ip
 8000324:	fab9 f989 	clz	r9, r9
 8000328:	690e      	ldr	r6, [r1, #16]
 800032a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800032e:	fa06 f609 	lsl.w	r6, r6, r9
 8000332:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000336:	f1b8 0f02 	cmp.w	r8, #2
 800033a:	60c6      	str	r6, [r0, #12]
 800033c:	d11c      	bne.n	8000378 <LL_GPIO_Init+0x114>
 800033e:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000342:	fab6 f686 	clz	r6, r6
 8000346:	2e07      	cmp	r6, #7
 8000348:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800034c:	dc16      	bgt.n	800037c <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800034e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8000352:	fa93 f6a3 	rbit	r6, r3
 8000356:	fab6 f686 	clz	r6, r6
 800035a:	fa93 f3a3 	rbit	r3, r3
 800035e:	fab3 f383 	clz	r3, r3
 8000362:	00b6      	lsls	r6, r6, #2
 8000364:	fa07 f606 	lsl.w	r6, r7, r6
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	ea28 0606 	bic.w	r6, r8, r6
 800036e:	fa0c fc03 	lsl.w	ip, ip, r3
 8000372:	ea46 060c 	orr.w	r6, r6, ip
 8000376:	6206      	str	r6, [r0, #32]
    pinpos++;
 8000378:	3401      	adds	r4, #1
 800037a:	e77e      	b.n	800027a <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800037c:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8000380:	0a1b      	lsrs	r3, r3, #8
 8000382:	fa93 f6a3 	rbit	r6, r3
 8000386:	fab6 f686 	clz	r6, r6
 800038a:	fa93 f3a3 	rbit	r3, r3
 800038e:	fab3 f383 	clz	r3, r3
 8000392:	00b6      	lsls	r6, r6, #2
 8000394:	fa07 f606 	lsl.w	r6, r7, r6
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	ea28 0606 	bic.w	r6, r8, r6
 800039e:	fa0c f303 	lsl.w	r3, ip, r3
 80003a2:	4333      	orrs	r3, r6
 80003a4:	6243      	str	r3, [r0, #36]	; 0x24
 80003a6:	e7e7      	b.n	8000378 <LL_GPIO_Init+0x114>

080003a8 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80003aa:	4a04      	ldr	r2, [pc, #16]	; (80003bc <RCC_GetHCLKClockFreq+0x14>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80003b2:	5cd3      	ldrb	r3, [r2, r3]
}
 80003b4:	40d8      	lsrs	r0, r3
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	08001510 	.word	0x08001510

080003c0 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <RCC_GetPCLK1ClockFreq+0x14>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80003ca:	5cd3      	ldrb	r3, [r2, r3]
}
 80003cc:	40d8      	lsrs	r0, r3
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	08001520 	.word	0x08001520

080003d8 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80003da:	4a04      	ldr	r2, [pc, #16]	; (80003ec <RCC_GetPCLK2ClockFreq+0x14>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80003e2:	5cd3      	ldrb	r3, [r2, r3]
}
 80003e4:	40d8      	lsrs	r0, r3
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	08001520 	.word	0x08001520

080003f0 <RCC_PLL_GetFreqDomain_SYS>:
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <RCC_PLL_GetFreqDomain_SYS+0x38>)
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80003f2:	490e      	ldr	r1, [pc, #56]	; (800042c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80003f4:	685a      	ldr	r2, [r3, #4]
 80003f6:	480e      	ldr	r0, [pc, #56]	; (8000430 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80003f8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	bf08      	it	eq
 8000400:	4608      	moveq	r0, r1
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000402:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800040a:	fa92 f2a2 	rbit	r2, r2
      break;
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800040e:	fab2 f282 	clz	r2, r2
 8000412:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000416:	40d3      	lsrs	r3, r2
 8000418:	3302      	adds	r3, #2
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800041a:	f001 010f 	and.w	r1, r1, #15
 800041e:	3101      	adds	r1, #1
 8000420:	fbb0 f0f1 	udiv	r0, r0, r1
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8000424:	4358      	muls	r0, r3
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	003d0900 	.word	0x003d0900
 8000430:	007a1200 	.word	0x007a1200

08000434 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <RCC_GetSystemClockFreq+0x14>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800043c:	2b08      	cmp	r3, #8
 800043e:	d101      	bne.n	8000444 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000440:	f7ff bfd6 	b.w	80003f0 <RCC_PLL_GetFreqDomain_SYS>
}
 8000444:	4801      	ldr	r0, [pc, #4]	; (800044c <RCC_GetSystemClockFreq+0x18>)
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	007a1200 	.word	0x007a1200

08000450 <LL_RCC_GetSystemClocksFreq>:
{
 8000450:	b510      	push	{r4, lr}
 8000452:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000454:	f7ff ffee 	bl	8000434 <RCC_GetSystemClockFreq>
 8000458:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800045a:	f7ff ffa5 	bl	80003a8 <RCC_GetHCLKClockFreq>
 800045e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000460:	f7ff ffae 	bl	80003c0 <RCC_GetPCLK1ClockFreq>
 8000464:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000466:	6860      	ldr	r0, [r4, #4]
 8000468:	f7ff ffb6 	bl	80003d8 <RCC_GetPCLK2ClockFreq>
 800046c:	60e0      	str	r0, [r4, #12]
 800046e:	bd10      	pop	{r4, pc}

08000470 <LL_RCC_GetUSARTClockFreq>:
{
 8000470:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000472:	bb18      	cbnz	r0, 80004bc <LL_RCC_GetUSARTClockFreq+0x4c>
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000474:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <LL_RCC_GetUSARTClockFreq+0x50>)
 8000476:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000478:	f003 0303 	and.w	r3, r3, #3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800047c:	2b02      	cmp	r3, #2
 800047e:	d00e      	beq.n	800049e <LL_RCC_GetUSARTClockFreq+0x2e>
 8000480:	2b03      	cmp	r3, #3
 8000482:	d005      	beq.n	8000490 <LL_RCC_GetUSARTClockFreq+0x20>
 8000484:	2b01      	cmp	r3, #1
 8000486:	d111      	bne.n	80004ac <LL_RCC_GetUSARTClockFreq+0x3c>
}
 8000488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 800048c:	f7ff bfd2 	b.w	8000434 <RCC_GetSystemClockFreq>
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000490:	6813      	ldr	r3, [r2, #0]
        if (LL_RCC_HSI_IsReady())
 8000492:	f013 0f02 	tst.w	r3, #2
          usart_frequency = HSI_VALUE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <LL_RCC_GetUSARTClockFreq+0x54>)
 8000498:	bf18      	it	ne
 800049a:	4618      	movne	r0, r3
 800049c:	bd08      	pop	{r3, pc}
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800049e:	6a13      	ldr	r3, [r2, #32]
        if (LL_RCC_LSE_IsReady())
 80004a0:	f013 0f02 	tst.w	r3, #2
          usart_frequency = LSE_VALUE;
 80004a4:	bf18      	it	ne
 80004a6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80004aa:	bd08      	pop	{r3, pc}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80004ac:	f7ff ffc2 	bl	8000434 <RCC_GetSystemClockFreq>
 80004b0:	f7ff ff7a 	bl	80003a8 <RCC_GetHCLKClockFreq>
}
 80004b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80004b8:	f7ff bf82 	b.w	80003c0 <RCC_GetPCLK1ClockFreq>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80004bc:	2000      	movs	r0, #0
}
 80004be:	bd08      	pop	{r3, pc}
 80004c0:	40021000 	.word	0x40021000
 80004c4:	007a1200 	.word	0x007a1200

080004c8 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80004c8:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <LL_TIM_Init+0x7c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80004ca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80004cc:	4290      	cmp	r0, r2
{
 80004ce:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80004d0:	d002      	beq.n	80004d8 <LL_TIM_Init+0x10>
 80004d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80004d6:	d109      	bne.n	80004ec <LL_TIM_Init+0x24>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80004d8:	684c      	ldr	r4, [r1, #4]
 80004da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80004de:	4290      	cmp	r0, r2
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80004e0:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80004e4:	d00d      	beq.n	8000502 <LL_TIM_Init+0x3a>
 80004e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80004ea:	d00a      	beq.n	8000502 <LL_TIM_Init+0x3a>
 80004ec:	4a16      	ldr	r2, [pc, #88]	; (8000548 <LL_TIM_Init+0x80>)
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d007      	beq.n	8000502 <LL_TIM_Init+0x3a>
 80004f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004f6:	4290      	cmp	r0, r2
 80004f8:	d003      	beq.n	8000502 <LL_TIM_Init+0x3a>
 80004fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004fe:	4290      	cmp	r0, r2
 8000500:	d103      	bne.n	800050a <LL_TIM_Init+0x42>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000502:	68ca      	ldr	r2, [r1, #12]
 8000504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000508:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800050a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800050c:	688b      	ldr	r3, [r1, #8]
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 800050e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000510:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000512:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LL_TIM_Init+0x7c>)
 8000516:	4298      	cmp	r0, r3
 8000518:	d00b      	beq.n	8000532 <LL_TIM_Init+0x6a>
 800051a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800051e:	4298      	cmp	r0, r3
 8000520:	d007      	beq.n	8000532 <LL_TIM_Init+0x6a>
 8000522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000526:	4298      	cmp	r0, r3
 8000528:	d003      	beq.n	8000532 <LL_TIM_Init+0x6a>
 800052a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800052e:	4298      	cmp	r0, r3
 8000530:	d101      	bne.n	8000536 <LL_TIM_Init+0x6e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000532:	7c0b      	ldrb	r3, [r1, #16]
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000534:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000536:	6943      	ldr	r3, [r0, #20]
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	bf00      	nop
 8000544:	40012c00 	.word	0x40012c00
 8000548:	40014000 	.word	0x40014000

0800054c <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 800054c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8000550:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8000552:	f000 80c1 	beq.w	80006d8 <LL_TIM_OC_Init+0x18c>
 8000556:	d805      	bhi.n	8000564 <LL_TIM_OC_Init+0x18>
 8000558:	2901      	cmp	r1, #1
 800055a:	d03f      	beq.n	80005dc <LL_TIM_OC_Init+0x90>
 800055c:	2910      	cmp	r1, #16
 800055e:	d07b      	beq.n	8000658 <LL_TIM_OC_Init+0x10c>
  ErrorStatus result = ERROR;
 8000560:	2000      	movs	r0, #0
    default:
      break;
  }

  return result;
}
 8000562:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8000564:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000568:	f000 80f5 	beq.w	8000756 <LL_TIM_OC_Init+0x20a>
 800056c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000570:	f000 8121 	beq.w	80007b6 <LL_TIM_OC_Init+0x26a>
 8000574:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8000578:	d1f2      	bne.n	8000560 <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800057a:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800057c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800057e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000582:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000584:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000586:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000588:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800058a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800058e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8000592:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000596:	6915      	ldr	r5, [r2, #16]
 8000598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800059c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80005a0:	6855      	ldr	r5, [r2, #4]
 80005a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005a6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80005aa:	4d9b      	ldr	r5, [pc, #620]	; (8000818 <LL_TIM_OC_Init+0x2cc>)
 80005ac:	42a8      	cmp	r0, r5
 80005ae:	d00b      	beq.n	80005c8 <LL_TIM_OC_Init+0x7c>
 80005b0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80005b4:	42a8      	cmp	r0, r5
 80005b6:	d007      	beq.n	80005c8 <LL_TIM_OC_Init+0x7c>
 80005b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005bc:	42a8      	cmp	r0, r5
 80005be:	d003      	beq.n	80005c8 <LL_TIM_OC_Init+0x7c>
 80005c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c4:	42a8      	cmp	r0, r5
 80005c6:	d104      	bne.n	80005d2 <LL_TIM_OC_Init+0x86>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80005c8:	6995      	ldr	r5, [r2, #24]
 80005ca:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80005ce:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80005d2:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80005d4:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80005d6:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80005d8:	6402      	str	r2, [r0, #64]	; 0x40
 80005da:	e03a      	b.n	8000652 <LL_TIM_OC_Init+0x106>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80005dc:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80005de:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80005e6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80005e8:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80005ea:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80005ec:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80005f0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80005f4:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80005f6:	6915      	ldr	r5, [r2, #16]
 80005f8:	f023 0302 	bic.w	r3, r3, #2
 80005fc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80005fe:	6855      	ldr	r5, [r2, #4]
 8000600:	f023 0301 	bic.w	r3, r3, #1
 8000604:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000606:	4d84      	ldr	r5, [pc, #528]	; (8000818 <LL_TIM_OC_Init+0x2cc>)
 8000608:	42a8      	cmp	r0, r5
 800060a:	d00b      	beq.n	8000624 <LL_TIM_OC_Init+0xd8>
 800060c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000610:	42a8      	cmp	r0, r5
 8000612:	d007      	beq.n	8000624 <LL_TIM_OC_Init+0xd8>
 8000614:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000618:	42a8      	cmp	r0, r5
 800061a:	d003      	beq.n	8000624 <LL_TIM_OC_Init+0xd8>
 800061c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000620:	42a8      	cmp	r0, r5
 8000622:	d112      	bne.n	800064a <LL_TIM_OC_Init+0xfe>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000624:	6955      	ldr	r5, [r2, #20]
 8000626:	f023 0308 	bic.w	r3, r3, #8
 800062a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800062e:	6895      	ldr	r5, [r2, #8]
 8000630:	f023 0304 	bic.w	r3, r3, #4
 8000634:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000638:	6995      	ldr	r5, [r2, #24]
 800063a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800063e:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000640:	69d5      	ldr	r5, [r2, #28]
 8000642:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8000646:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800064a:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800064c:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800064e:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000650:	6342      	str	r2, [r0, #52]	; 0x34

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000652:	6203      	str	r3, [r0, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8000654:	2001      	movs	r0, #1
      break;
 8000656:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000658:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800065a:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800065c:	f023 0310 	bic.w	r3, r3, #16
 8000660:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000662:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000664:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000666:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000668:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800066c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8000670:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000674:	6915      	ldr	r5, [r2, #16]
 8000676:	f023 0320 	bic.w	r3, r3, #32
 800067a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800067e:	6855      	ldr	r5, [r2, #4]
 8000680:	f023 0310 	bic.w	r3, r3, #16
 8000684:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000688:	4d63      	ldr	r5, [pc, #396]	; (8000818 <LL_TIM_OC_Init+0x2cc>)
 800068a:	42a8      	cmp	r0, r5
 800068c:	d00b      	beq.n	80006a6 <LL_TIM_OC_Init+0x15a>
 800068e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000692:	42a8      	cmp	r0, r5
 8000694:	d007      	beq.n	80006a6 <LL_TIM_OC_Init+0x15a>
 8000696:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800069a:	42a8      	cmp	r0, r5
 800069c:	d003      	beq.n	80006a6 <LL_TIM_OC_Init+0x15a>
 800069e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006a2:	42a8      	cmp	r0, r5
 80006a4:	d113      	bne.n	80006ce <LL_TIM_OC_Init+0x182>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80006a6:	6955      	ldr	r5, [r2, #20]
 80006a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006ac:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80006b0:	6895      	ldr	r5, [r2, #8]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80006ba:	6995      	ldr	r5, [r2, #24]
 80006bc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80006c0:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80006c4:	69d5      	ldr	r5, [r2, #28]
 80006c6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80006ca:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80006ce:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80006d0:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80006d2:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80006d4:	6382      	str	r2, [r0, #56]	; 0x38
 80006d6:	e7bc      	b.n	8000652 <LL_TIM_OC_Init+0x106>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80006d8:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80006da:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80006dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e0:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80006e2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80006e4:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80006e6:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80006e8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80006ec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80006f0:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80006f2:	6915      	ldr	r5, [r2, #16]
 80006f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80006fc:	6855      	ldr	r5, [r2, #4]
 80006fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000702:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000706:	4d44      	ldr	r5, [pc, #272]	; (8000818 <LL_TIM_OC_Init+0x2cc>)
 8000708:	42a8      	cmp	r0, r5
 800070a:	d00b      	beq.n	8000724 <LL_TIM_OC_Init+0x1d8>
 800070c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000710:	42a8      	cmp	r0, r5
 8000712:	d007      	beq.n	8000724 <LL_TIM_OC_Init+0x1d8>
 8000714:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000718:	42a8      	cmp	r0, r5
 800071a:	d003      	beq.n	8000724 <LL_TIM_OC_Init+0x1d8>
 800071c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000720:	42a8      	cmp	r0, r5
 8000722:	d113      	bne.n	800074c <LL_TIM_OC_Init+0x200>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000724:	6955      	ldr	r5, [r2, #20]
 8000726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800072a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800072e:	6895      	ldr	r5, [r2, #8]
 8000730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000734:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000738:	6995      	ldr	r5, [r2, #24]
 800073a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800073e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000742:	69d5      	ldr	r5, [r2, #28]
 8000744:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8000748:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800074c:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800074e:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000750:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000752:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000754:	e77d      	b.n	8000652 <LL_TIM_OC_Init+0x106>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000756:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000758:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800075a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800075e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000760:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000762:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000764:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000768:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800076c:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800076e:	6911      	ldr	r1, [r2, #16]
 8000770:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000774:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000778:	6851      	ldr	r1, [r2, #4]
 800077a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800077e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000782:	4925      	ldr	r1, [pc, #148]	; (8000818 <LL_TIM_OC_Init+0x2cc>)
 8000784:	4288      	cmp	r0, r1
 8000786:	d00b      	beq.n	80007a0 <LL_TIM_OC_Init+0x254>
 8000788:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800078c:	4288      	cmp	r0, r1
 800078e:	d007      	beq.n	80007a0 <LL_TIM_OC_Init+0x254>
 8000790:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000794:	4288      	cmp	r0, r1
 8000796:	d003      	beq.n	80007a0 <LL_TIM_OC_Init+0x254>
 8000798:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800079c:	4288      	cmp	r0, r1
 800079e:	d106      	bne.n	80007ae <LL_TIM_OC_Init+0x262>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80007a0:	6841      	ldr	r1, [r0, #4]
 80007a2:	6995      	ldr	r5, [r2, #24]
 80007a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80007a8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80007ac:	6041      	str	r1, [r0, #4]
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80007ae:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80007b0:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR5, CompareValue);
 80007b2:	6582      	str	r2, [r0, #88]	; 0x58
 80007b4:	e74d      	b.n	8000652 <LL_TIM_OC_Init+0x106>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80007b6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80007b8:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80007ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007be:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80007c0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80007c2:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80007c4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80007c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80007cc:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80007d0:	6911      	ldr	r1, [r2, #16]
 80007d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80007d6:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80007da:	6851      	ldr	r1, [r2, #4]
 80007dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007e0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <LL_TIM_OC_Init+0x2cc>)
 80007e6:	4288      	cmp	r0, r1
 80007e8:	d00b      	beq.n	8000802 <LL_TIM_OC_Init+0x2b6>
 80007ea:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80007ee:	4288      	cmp	r0, r1
 80007f0:	d007      	beq.n	8000802 <LL_TIM_OC_Init+0x2b6>
 80007f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80007f6:	4288      	cmp	r0, r1
 80007f8:	d003      	beq.n	8000802 <LL_TIM_OC_Init+0x2b6>
 80007fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80007fe:	4288      	cmp	r0, r1
 8000800:	d106      	bne.n	8000810 <LL_TIM_OC_Init+0x2c4>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000802:	6841      	ldr	r1, [r0, #4]
 8000804:	6995      	ldr	r5, [r2, #24]
 8000806:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800080a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800080e:	6041      	str	r1, [r0, #4]
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000810:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000812:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000814:	65c2      	str	r2, [r0, #92]	; 0x5c
 8000816:	e71c      	b.n	8000652 <LL_TIM_OC_Init+0x106>
 8000818:	40012c00 	.word	0x40012c00

0800081c <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800081c:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800081e:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8000820:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8000822:	684a      	ldr	r2, [r1, #4]
 8000824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000828:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800082a:	680a      	ldr	r2, [r1, #0]
 800082c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000830:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8000832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000836:	89cb      	ldrh	r3, [r1, #14]
 8000838:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800083a:	690a      	ldr	r2, [r1, #16]
 800083c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000840:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8000842:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8000844:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000848:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <LL_TIM_BDTR_Init+0x5c>)
 800084c:	4290      	cmp	r0, r2
 800084e:	d10f      	bne.n	8000870 <LL_TIM_BDTR_Init+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8000850:	694a      	ldr	r2, [r1, #20]
 8000852:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000856:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8000858:	6a0a      	ldr	r2, [r1, #32]
 800085a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800085e:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8000860:	698a      	ldr	r2, [r1, #24]
 8000862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000866:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8000868:	69ca      	ldr	r2, [r1, #28]
 800086a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800086e:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8000870:	6443      	str	r3, [r0, #68]	; 0x44
}
 8000872:	2001      	movs	r0, #1
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40012c00 	.word	0x40012c00

0800087c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800087c:	b530      	push	{r4, r5, lr}
 800087e:	4604      	mov	r4, r0
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000880:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000882:	f010 0001 	ands.w	r0, r0, #1
{
 8000886:	b085      	sub	sp, #20
 8000888:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800088a:	d002      	beq.n	8000892 <LL_USART_Init+0x16>
  ErrorStatus status = ERROR;
 800088c:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800088e:	b005      	add	sp, #20
 8000890:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8000892:	68ea      	ldr	r2, [r5, #12]
 8000894:	686b      	ldr	r3, [r5, #4]
 8000896:	6821      	ldr	r1, [r4, #0]
 8000898:	4313      	orrs	r3, r2
 800089a:	692a      	ldr	r2, [r5, #16]
 800089c:	4313      	orrs	r3, r2
 800089e:	69aa      	ldr	r2, [r5, #24]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <LL_USART_Init+0xa4>)
 80008a4:	400a      	ands	r2, r1
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80008aa:	6863      	ldr	r3, [r4, #4]
 80008ac:	68aa      	ldr	r2, [r5, #8]
 80008ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b2:	4313      	orrs	r3, r2
 80008b4:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80008b6:	68a3      	ldr	r3, [r4, #8]
 80008b8:	696a      	ldr	r2, [r5, #20]
 80008ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008be:	4313      	orrs	r3, r2
 80008c0:	60a3      	str	r3, [r4, #8]
    if (USARTx == USART1)
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <LL_USART_Init+0xa8>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d119      	bne.n	80008fc <LL_USART_Init+0x80>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80008c8:	f7ff fdd2 	bl	8000470 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d0dd      	beq.n	800088c <LL_USART_Init+0x10>
        && (USART_InitStruct->BaudRate != 0U))
 80008d0:	682a      	ldr	r2, [r5, #0]
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d0da      	beq.n	800088c <LL_USART_Init+0x10>
                                          uint32_t BaudRate)
{
  register uint32_t usartdiv = 0x0U;
  register uint32_t brrtemp = 0x0U;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80008d6:	69ab      	ldr	r3, [r5, #24]
 80008d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008dc:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80008e0:	d118      	bne.n	8000914 <LL_USART_Init+0x98>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80008e2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80008e6:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 80008ea:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80008ee:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80008f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80008f4:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80008f6:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 80008f8:	2001      	movs	r0, #1
 80008fa:	e7c8      	b.n	800088e <LL_USART_Init+0x12>
    else if (USARTx == USART2)
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <LL_USART_Init+0xac>)
 80008fe:	429c      	cmp	r4, r3
 8000900:	d104      	bne.n	800090c <LL_USART_Init+0x90>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8000902:	4668      	mov	r0, sp
 8000904:	f7ff fda4 	bl	8000450 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8000908:	9802      	ldr	r0, [sp, #8]
 800090a:	e7df      	b.n	80008cc <LL_USART_Init+0x50>
    else if (USARTx == USART3)
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <LL_USART_Init+0xb0>)
 800090e:	429c      	cmp	r4, r3
 8000910:	d1bc      	bne.n	800088c <LL_USART_Init+0x10>
 8000912:	e7f6      	b.n	8000902 <LL_USART_Init+0x86>
 8000914:	4403      	add	r3, r0
 8000916:	fbb3 f3f2 	udiv	r3, r3, r2
 800091a:	b29b      	uxth	r3, r3
 800091c:	e7eb      	b.n	80008f6 <LL_USART_Init+0x7a>
 800091e:	bf00      	nop
 8000920:	efff69f3 	.word	0xefff69f3
 8000924:	40013800 	.word	0x40013800
 8000928:	40004400 	.word	0x40004400
 800092c:	40004800 	.word	0x40004800

08000930 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000934:	fbb0 f0f3 	udiv	r0, r0, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <LL_Init1msTick+0x18>)
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800093a:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800093c:	3801      	subs	r0, #1
 800093e:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	2207      	movs	r2, #7
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	4770      	bx	lr
 8000948:	e000e010 	.word	0xe000e010

0800094c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800094c:	4b01      	ldr	r3, [pc, #4]	; (8000954 <LL_SetSystemCoreClock+0x8>)
 800094e:	6018      	str	r0, [r3, #0]
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000024 	.word	0x20000024

08000958 <NVIC_GetPriorityGrouping>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <NVIC_GetPriorityGrouping+0xc>)
 800095a:	68d8      	ldr	r0, [r3, #12]
}
 800095c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <LL_AHB1_GRP1_EnableClock+0x18>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	4302      	orrs	r2, r0
 800096e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000970:	695b      	ldr	r3, [r3, #20]
{
 8000972:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000974:	4018      	ands	r0, r3
 8000976:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000978:	9b01      	ldr	r3, [sp, #4]
}
 800097a:	b002      	add	sp, #8
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <LL_APB1_GRP1_EnableClock+0x18>)
 8000986:	69da      	ldr	r2, [r3, #28]
 8000988:	4302      	orrs	r2, r0
 800098a:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800098c:	69db      	ldr	r3, [r3, #28]
{
 800098e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000990:	4018      	ands	r0, r3
 8000992:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000994:	9b01      	ldr	r3, [sp, #4]
}
 8000996:	b002      	add	sp, #8
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <LL_APB2_GRP1_EnableClock+0x18>)
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	4302      	orrs	r2, r0
 80009a6:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009a8:	699b      	ldr	r3, [r3, #24]
{
 80009aa:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009ac:	4018      	ands	r0, r3
 80009ae:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80009b0:	9b01      	ldr	r3, [sp, #4]
}
 80009b2:	b002      	add	sp, #8
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <NVIC_EncodePriority.constprop.18>:

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80009bc:	2000      	movs	r0, #0
 80009be:	4770      	bx	lr

080009c0 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009c0:	4a38      	ldr	r2, [pc, #224]	; (8000aa4 <SystemClock_Config+0xe4>)
 80009c2:	6813      	ldr	r3, [r2, #0]
 80009c4:	f023 0307 	bic.w	r3, r3, #7
 80009c8:	f043 0302 	orr.w	r3, r3, #2
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b510      	push	{r4, lr}
 80009ce:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009d0:	6813      	ldr	r3, [r2, #0]
 80009d2:	f003 0307 	and.w	r3, r3, #7

  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d000      	beq.n	80009dc <SystemClock_Config+0x1c>
 80009da:	e7fe      	b.n	80009da <SystemClock_Config+0x1a>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80009dc:	4c32      	ldr	r4, [pc, #200]	; (8000aa8 <SystemClock_Config+0xe8>)
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6023      	str	r3, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ec:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80009ee:	6823      	ldr	r3, [r4, #0]
  LL_RCC_HSE_EnableBypass();

  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80009f0:	039a      	lsls	r2, r3, #14
 80009f2:	d5fc      	bpl.n	80009ee <SystemClock_Config+0x2e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80009f4:	6863      	ldr	r3, [r4, #4]
 80009f6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80009fa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80009fe:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a02:	f023 030f 	bic.w	r3, r3, #15
 8000a06:	62e3      	str	r3, [r4, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a0e:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a10:	6823      	ldr	r3, [r4, #0]
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);

  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a12:	019b      	lsls	r3, r3, #6
 8000a14:	d5fc      	bpl.n	8000a10 <SystemClock_Config+0x50>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a16:	6863      	ldr	r3, [r4, #4]
 8000a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a1c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a1e:	6863      	ldr	r3, [r4, #4]
 8000a20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a28:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a2a:	6863      	ldr	r3, [r4, #4]
 8000a2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a30:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a32:	6863      	ldr	r3, [r4, #4]
 8000a34:	f023 0303 	bic.w	r3, r3, #3
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d1fa      	bne.n	8000a3e <SystemClock_Config+0x7e>
  {
  
  }
  LL_Init1msTick(72000000);
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <SystemClock_Config+0xec>)
 8000a4a:	f7ff ff71 	bl	8000930 <LL_Init1msTick>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <SystemClock_Config+0xf0>)

  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);

  LL_SetSystemCoreClock(72000000);
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <SystemClock_Config+0xec>)
 8000a52:	6813      	ldr	r3, [r2, #0]
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	f7ff ff77 	bl	800094c <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8000a5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a60:	f023 0303 	bic.w	r3, r3, #3
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6323      	str	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 8000a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a70:	6323      	str	r3, [r4, #48]	; 0x30
 8000a72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a78:	6323      	str	r3, [r4, #48]	; 0x30
 8000a7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a80:	6323      	str	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADC1PRES, ADCxSource);
 8000a82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a84:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_RCC_SetTIMClockSource(LL_RCC_TIM15_CLKSOURCE_PCLK2);

  LL_RCC_SetADCClockSource(LL_RCC_ADC1_CLKSRC_PLL_DIV_1);

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a8e:	f7ff ff63 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000a92:	f7ff ff93 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <SystemClock_Config+0xf4>)
 8000a98:	0100      	lsls	r0, r0, #4
 8000a9a:	b2c0      	uxtb	r0, r0
 8000a9c:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
 8000aa0:	bd10      	pop	{r4, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	044aa200 	.word	0x044aa200
 8000ab0:	e000e010 	.word	0xe000e010
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <main>:
{
 8000ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000abc:	2001      	movs	r0, #1
{
 8000abe:	b09f      	sub	sp, #124	; 0x7c
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ac0:	f7ff ff6e 	bl	80009a0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ac4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ac8:	f7ff ff5c 	bl	8000984 <LL_APB1_GRP1_EnableClock>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4ace      	ldr	r2, [pc, #824]	; (8000e08 <main+0x350>)
  reg_value  =  (reg_value                                   |
 8000ace:	4bcf      	ldr	r3, [pc, #828]	; (8000e0c <main+0x354>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	68d1      	ldr	r1, [r2, #12]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ad2:	f8df 9348 	ldr.w	r9, [pc, #840]	; 8000e1c <main+0x364>
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);

  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000ad6:	f8df b348 	ldr.w	fp, [pc, #840]	; 8000e20 <main+0x368>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000ade:	0409      	lsls	r1, r1, #16
 8000ae0:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 8000ae2:	430b      	orrs	r3, r1
  SCB->AIRCR =  reg_value;
 8000ae4:	60d3      	str	r3, [r2, #12]
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ae6:	f7ff ff37 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000aea:	f7ff ff67 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	0100      	lsls	r0, r0, #4
 8000af0:	b2c0      	uxtb	r0, r0
 8000af2:	7610      	strb	r0, [r2, #24]
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000af4:	f7ff ff30 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000af8:	f7ff ff60 	bl	80009bc <NVIC_EncodePriority.constprop.18>
 8000afc:	0100      	lsls	r0, r0, #4
 8000afe:	b2c0      	uxtb	r0, r0
 8000b00:	7650      	strb	r0, [r2, #25]
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b02:	f7ff ff29 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000b06:	f7ff ff59 	bl	80009bc <NVIC_EncodePriority.constprop.18>
 8000b0a:	0100      	lsls	r0, r0, #4
 8000b0c:	b2c0      	uxtb	r0, r0
 8000b0e:	7690      	strb	r0, [r2, #26]
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b10:	f7ff ff22 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000b14:	f7ff ff52 	bl	80009bc <NVIC_EncodePriority.constprop.18>
 8000b18:	0100      	lsls	r0, r0, #4
 8000b1a:	b2c0      	uxtb	r0, r0
 8000b1c:	77d0      	strb	r0, [r2, #31]
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b1e:	f7ff ff1b 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000b22:	f7ff ff4b 	bl	80009bc <NVIC_EncodePriority.constprop.18>
 8000b26:	0100      	lsls	r0, r0, #4
 8000b28:	b2c0      	uxtb	r0, r0
 8000b2a:	f882 0020 	strb.w	r0, [r2, #32]
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b2e:	f7ff ff13 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000b32:	f7ff ff43 	bl	80009bc <NVIC_EncodePriority.constprop.18>
 8000b36:	0100      	lsls	r0, r0, #4
 8000b38:	b2c0      	uxtb	r0, r0
 8000b3a:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b3e:	f7ff ff0b 	bl	8000958 <NVIC_GetPriorityGrouping>
 8000b42:	f7ff ff3b 	bl	80009bc <NVIC_EncodePriority.constprop.18>
 8000b46:	0100      	lsls	r0, r0, #4
 8000b48:	b2c0      	uxtb	r0, r0
 8000b4a:	f882 0023 	strb.w	r0, [r2, #35]	; 0x23
  SystemClock_Config();
 8000b4e:	f7ff ff37 	bl	80009c0 <SystemClock_Config>
  SysTick->CTRL=5;
 8000b52:	4aaf      	ldr	r2, [pc, #700]	; (8000e10 <main+0x358>)
 8000b54:	2305      	movs	r3, #5
 8000b56:	6013      	str	r3, [r2, #0]
{

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000b58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000b5c:	f7ff ff04 	bl	8000968 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b60:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b64:	f7ff ff00 	bl	8000968 <LL_AHB1_GRP1_EnableClock>
 8000b68:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b70:	f7ff fefa 	bl	8000968 <LL_AHB1_GRP1_EnableClock>
 8000b74:	f249 031c 	movw	r3, #36892	; 0x901c
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	ad14      	add	r5, sp, #80	; 0x50
 8000b7c:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b7e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b80:	2601      	movs	r6, #1
 8000b82:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	4629      	mov	r1, r5
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8000b88:	231c      	movs	r3, #28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8000b8c:	9314      	str	r3, [sp, #80]	; 0x50

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b8e:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000b92:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b96:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b98:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b9a:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b9c:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f7ff fb61 	bl	8000264 <LL_GPIO_Init>
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000ba6:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000baa:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bae:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f7ff fb58 	bl	8000264 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	4629      	mov	r1, r5
 8000bb6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000bb8:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000bba:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bbe:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f7ff fb50 	bl	8000264 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_15;
 8000bc4:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000bc8:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	4629      	mov	r1, r5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000bcc:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000bd0:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bd2:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bd4:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bd6:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f7ff fb44 	bl	8000264 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000bdc:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	4629      	mov	r1, r5
 8000be0:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000be2:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be4:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000be6:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000be8:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bea:	9618      	str	r6, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f7ff fb3a 	bl	8000264 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000bf4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bf8:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bfa:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bfc:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bfe:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f7ff fb30 	bl	8000264 <LL_GPIO_Init>
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000c04:	4b83      	ldr	r3, [pc, #524]	; (8000e14 <main+0x35c>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c14:	601a      	str	r2, [r3, #0]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000c16:	4630      	mov	r0, r6
 8000c18:	f7ff fea6 	bl	8000968 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC1);
 8000c1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c20:	f7ff fea2 	bl	8000968 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	4629      	mov	r1, r5
 8000c26:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000c28:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c2c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c30:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f7ff fb17 	bl	8000264 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	4629      	mov	r1, r5
 8000c38:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000c3a:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c3c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c40:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f7ff fb0f 	bl	8000264 <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000c46:	4b74      	ldr	r3, [pc, #464]	; (8000e18 <main+0x360>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000c4e:	f022 0210 	bic.w	r2, r2, #16
 8000c52:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f022 0220 	bic.w	r2, r2, #32
 8000c62:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c6a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c72:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c7e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c8a:	601a      	str	r2, [r3, #0]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c8c:	a906      	add	r1, sp, #24
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000c8e:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c96:	9406      	str	r4, [sp, #24]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c98:	9407      	str	r4, [sp, #28]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c9a:	9408      	str	r4, [sp, #32]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c9c:	f7ff faa3 	bl	80001e6 <LL_ADC_Init>
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000ca4:	a90c      	add	r1, sp, #48	; 0x30
 8000ca6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000caa:	9311      	str	r3, [sp, #68]	; 0x44
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000cac:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000cae:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000cb0:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000cb2:	940f      	str	r4, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000cb4:	9610      	str	r6, [sp, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000cb6:	f7ff faab 	bl	8000210 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000cba:	f84a 4d74 	str.w	r4, [sl, #-116]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000cbe:	4658      	mov	r0, fp
 8000cc0:	4651      	mov	r1, sl
 8000cc2:	f7ff fa81 	bl	80001c8 <LL_ADC_CommonInit>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000cc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cca:	6853      	ldr	r3, [r2, #4]
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000cd2:	6853      	ldr	r3, [r2, #4]
 8000cd4:	f023 0308 	bic.w	r3, r3, #8
 8000cd8:	6053      	str	r3, [r2, #4]
 8000cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cde:	fa93 f3a3 	rbit	r3, r3
  MODIFY_REG(*preg,
 8000ce2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ce4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000ce8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cf2:	fa93 f3a3 	rbit	r3, r3
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000cf6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
  MODIFY_REG(*preg,
 8000d0a:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8000d0e:	fa90 fea0 	rbit	lr, r0
 8000d12:	f04f 7190 	mov.w	r1, #18874368	; 0x1200000
 8000d16:	fabe fe8e 	clz	lr, lr
 8000d1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8000d1e:	f04f 0e07 	mov.w	lr, #7
 8000d22:	fa0e f101 	lsl.w	r1, lr, r1
 8000d26:	ea2c 0101 	bic.w	r1, ip, r1
 8000d2a:	fa90 f0a0 	rbit	r0, r0
 8000d2e:	6159      	str	r1, [r3, #20]
  MODIFY_REG(ADCx->DIFSEL,
 8000d30:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d38:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d3c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8000d40:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d48:	f8cb 3008 	str.w	r3, [fp, #8]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d4c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8000e24 <main+0x36c>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000d50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d54:	f7ff fe24 	bl	80009a0 <LL_APB2_GRP1_EnableClock>
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d58:	4651      	mov	r1, sl
 8000d5a:	4658      	mov	r0, fp
  TIM_InitStruct.Prescaler = 0;
 8000d5c:	f8ad 4004 	strh.w	r4, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d60:	9402      	str	r4, [sp, #8]
  TIM_InitStruct.Autoreload = 0;
 8000d62:	9403      	str	r4, [sp, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d64:	9404      	str	r4, [sp, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000d66:	f88d 4014 	strb.w	r4, [sp, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d6a:	f7ff fbad 	bl	80004c8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d6e:	f8db 3000 	ldr.w	r3, [fp]
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d72:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8000e28 <main+0x370>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d7a:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000d7e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	f8cb 3018 	str.w	r3, [fp, #24]
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d8a:	4631      	mov	r1, r6
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d8e:	aa0c      	add	r2, sp, #48	; 0x30
 8000d90:	4658      	mov	r0, fp
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d92:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d94:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000d96:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_OC_InitStruct.CompareValue = 0;
 8000d98:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d9a:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d9c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000d9e:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000da0:	9413      	str	r4, [sp, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000da2:	f7ff fbd3 	bl	800054c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000da6:	f8db 3018 	ldr.w	r3, [fp, #24]
 8000daa:	f023 0304 	bic.w	r3, r3, #4
 8000dae:	f8cb 3018 	str.w	r3, [fp, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000db2:	f8da 3004 	ldr.w	r3, [sl, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000db6:	940d      	str	r4, [sp, #52]	; 0x34
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000dbc:	aa0c      	add	r2, sp, #48	; 0x30
 8000dbe:	f8ca 3004 	str.w	r3, [sl, #4]
 8000dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc6:	4658      	mov	r0, fp
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000dc8:	940e      	str	r4, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000dca:	f7ff fbbf 	bl	800054c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000dce:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dd6:	f8ca 3004 	str.w	r3, [sl, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000dda:	f8db 3004 	ldr.w	r3, [fp, #4]
 8000dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000de2:	f8cb 3004 	str.w	r3, [fp, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000de6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8000dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000dee:	f8cb 3004 	str.w	r3, [fp, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000df2:	f8db 3008 	ldr.w	r3, [fp, #8]
 8000df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dfa:	f8cb 3008 	str.w	r3, [fp, #8]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e02:	9318      	str	r3, [sp, #96]	; 0x60
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000e04:	4629      	mov	r1, r5
 8000e06:	e011      	b.n	8000e2c <main+0x374>
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	05fa0300 	.word	0x05fa0300
 8000e10:	e000e010 	.word	0xe000e010
 8000e14:	40010000 	.word	0x40010000
 8000e18:	40020008 	.word	0x40020008
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	50000300 	.word	0x50000300
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40012c18 	.word	0x40012c18
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000e30:	4658      	mov	r0, fp
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000e32:	931b      	str	r3, [sp, #108]	; 0x6c
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000e34:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000e36:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000e38:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_BDTRInitStruct.DeadTime = 0;
 8000e3a:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000e3e:	f8ad 405e 	strh.w	r4, [sp, #94]	; 0x5e
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000e42:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000e44:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000e46:	941c      	str	r4, [sp, #112]	; 0x70
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000e48:	941d      	str	r4, [sp, #116]	; 0x74
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000e4a:	f7ff fce7 	bl	800081c <LL_TIM_BDTR_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e52:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e54:	2302      	movs	r3, #2
 8000e56:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e5a:	2306      	movs	r3, #6
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e5e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e60:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e64:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f7ff f9fd 	bl	8000264 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e6a:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000e6e:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e72:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8000e76:	230b      	movs	r3, #11
 8000e78:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000e7a:	f8cd a018 	str.w	sl, [sp, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e7e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e80:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e82:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f7ff f9ee 	bl	8000264 <LL_GPIO_Init>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e88:	4630      	mov	r0, r6
 8000e8a:	f7ff fd7b 	bl	8000984 <LL_APB1_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e8e:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	4629      	mov	r1, r5
 8000e92:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e94:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000e96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000e9a:	9619      	str	r6, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e9c:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea0:	9418      	str	r4, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f7ff f9df 	bl	8000264 <LL_GPIO_Init>
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ea6:	a90c      	add	r1, sp, #48	; 0x30
 8000ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_InitStruct.Prescaler = 0;
 8000eac:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000eb0:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_InitStruct.Autoreload = 0;
 8000eb2:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000eb4:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000eb6:	f7ff fb07 	bl	80004c8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000ebe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	f022 0203 	bic.w	r2, r2, #3
 8000ee0:	4332      	orrs	r2, r6
 8000ee2:	619a      	str	r2, [r3, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000ee4:	699a      	ldr	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000ee6:	4ec3      	ldr	r6, [pc, #780]	; (80011f4 <main+0x73c>)
 8000ee8:	f022 020c 	bic.w	r2, r2, #12
 8000eec:	619a      	str	r2, [r3, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ef4:	619a      	str	r2, [r3, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000ef6:	6a1a      	ldr	r2, [r3, #32]
 8000ef8:	f042 020a 	orr.w	r2, r2, #10
 8000efc:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f08:	619a      	str	r2, [r3, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000f0a:	699a      	ldr	r2, [r3, #24]
 8000f0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f10:	619a      	str	r2, [r3, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000f18:	619a      	str	r2, [r3, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000f20:	621a      	str	r2, [r3, #32]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000f22:	f7ff fd3d 	bl	80009a0 <LL_APB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000f26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f2a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	930d      	str	r3, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f32:	2307      	movs	r3, #7
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f36:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f3a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f3c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3e:	9410      	str	r4, [sp, #64]	; 0x40
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f7ff f990 	bl	8000264 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000f44:	4bac      	ldr	r3, [pc, #688]	; (80011f8 <main+0x740>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f4c:	f022 0210 	bic.w	r2, r2, #16
 8000f50:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f58:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f022 0220 	bic.w	r2, r2, #32
 8000f60:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f68:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f70:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f78:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f80:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000f82:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000f86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f8a:	f022 0210 	bic.w	r2, r2, #16
 8000f8e:	f042 0210 	orr.w	r2, r2, #16
 8000f92:	f843 2c14 	str.w	r2, [r3, #-20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000f96:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000f9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f9e:	f843 2c14 	str.w	r2, [r3, #-20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000fa2:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fa6:	f022 0220 	bic.w	r2, r2, #32
 8000faa:	f843 2c14 	str.w	r2, [r3, #-20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000fae:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb6:	f843 2c14 	str.w	r2, [r3, #-20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000fba:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc2:	f843 2c14 	str.w	r2, [r3, #-20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000fc6:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fce:	f843 2c14 	str.w	r2, [r3, #-20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000fd2:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8000fd6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000fda:	f843 2c14 	str.w	r2, [r3, #-20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8000fde:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fe2:	230c      	movs	r3, #12
  LL_USART_Init(USART1, &USART_InitStruct);
 8000fe4:	4629      	mov	r1, r5
  USART_InitStruct.BaudRate = 115200;
 8000fe6:	f44f 3be1 	mov.w	fp, #115200	; 0x1c200
  LL_USART_Init(USART1, &USART_InitStruct);
 8000fea:	4630      	mov	r0, r6
  USART_InitStruct.BaudRate = 115200;
 8000fec:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ff0:	9415      	str	r4, [sp, #84]	; 0x54
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ff2:	9416      	str	r4, [sp, #88]	; 0x58
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ff4:	9417      	str	r4, [sp, #92]	; 0x5c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ff6:	9318      	str	r3, [sp, #96]	; 0x60
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8000ff8:	971a      	str	r7, [sp, #104]	; 0x68
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ffa:	9419      	str	r4, [sp, #100]	; 0x64
  LL_USART_Init(USART1, &USART_InitStruct);
 8000ffc:	f7ff fc3e 	bl	800087c <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001000:	68b3      	ldr	r3, [r6, #8]
 8001002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001006:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8001008:	68b3      	ldr	r3, [r6, #8]
 800100a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100e:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001010:	6873      	ldr	r3, [r6, #4]
 8001012:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001016:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001018:	68b3      	ldr	r3, [r6, #8]
 800101a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800101e:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001020:	6833      	ldr	r3, [r6, #0]
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6033      	str	r3, [r6, #0]
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001028:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800102c:	f7ff fcaa 	bl	8000984 <LL_APB1_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001030:	2318      	movs	r3, #24
 8001032:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001034:	2302      	movs	r3, #2
 8001036:	930d      	str	r3, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800103a:	2307      	movs	r3, #7
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	4648      	mov	r0, r9
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800103e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001042:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001044:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001046:	9410      	str	r4, [sp, #64]	; 0x40
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f7ff f90c 	bl	8000264 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <main+0x744>)
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 800104e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800120c <main+0x754>
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001058:	f022 0210 	bic.w	r2, r2, #16
 800105c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001064:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f022 0220 	bic.w	r2, r2, #32
 800106c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001074:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800107c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001084:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001086:	681a      	ldr	r2, [r3, #0]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001088:	f5a6 4674 	sub.w	r6, r6, #62464	; 0xf400
 800108c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	4629      	mov	r1, r5
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001094:	2304      	movs	r3, #4
  LL_USART_Init(USART2, &USART_InitStruct);
 8001096:	4630      	mov	r0, r6
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8001098:	9318      	str	r3, [sp, #96]	; 0x60
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 800109a:	971a      	str	r7, [sp, #104]	; 0x68
  USART_InitStruct.BaudRate = 115200;
 800109c:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010a0:	9415      	str	r4, [sp, #84]	; 0x54
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010a2:	9416      	str	r4, [sp, #88]	; 0x58
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010a4:	9417      	str	r4, [sp, #92]	; 0x5c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010a6:	9419      	str	r4, [sp, #100]	; 0x64
  LL_USART_Init(USART2, &USART_InitStruct);
 80010a8:	f7ff fbe8 	bl	800087c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80010ac:	68b3      	ldr	r3, [r6, #8]
 80010ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010b2:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80010b4:	68b3      	ldr	r3, [r6, #8]
 80010b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ba:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010bc:	6873      	ldr	r3, [r6, #4]
 80010be:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80010c2:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010c4:	68b3      	ldr	r3, [r6, #8]
 80010c6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80010ca:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6033      	str	r3, [r6, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 80010d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010d8:	f7ff fc62 	bl	80009a0 <LL_APB2_GRP1_EnableClock>
  TIM_InitStruct.Prescaler = 586;
 80010dc:	f240 234a 	movw	r3, #586	; 0x24a
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 80010e0:	4629      	mov	r1, r5
  TIM_InitStruct.Prescaler = 586;
 80010e2:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 80010e6:	4640      	mov	r0, r8
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 80010e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ec:	9317      	str	r3, [sp, #92]	; 0x5c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80010ee:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_InitStruct.Autoreload = 0;
 80010f0:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 80010f2:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 80010f6:	f7ff f9e7 	bl	80004c8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010fa:	f8d8 3000 	ldr.w	r3, [r8]
 80010fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001102:	f506 467c 	add.w	r6, r6, #64512	; 0xfc00
 8001106:	f8c8 3000 	str.w	r3, [r8]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 800110a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800110e:	f7ff fc47 	bl	80009a0 <LL_APB2_GRP1_EnableClock>
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001112:	4629      	mov	r1, r5
 8001114:	4630      	mov	r0, r6
  TIM_InitStruct.Prescaler = 0;
 8001116:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800111a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_InitStruct.Autoreload = 0;
 800111c:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800111e:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_InitStruct.RepetitionCounter = 0;
 8001120:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001124:	f7ff f9d0 	bl	80004c8 <LL_TIM_Init>
 8001128:	6833      	ldr	r3, [r6, #0]
 800112a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800112e:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001130:	68b3      	ldr	r3, [r6, #8]
 8001132:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001136:	f023 0307 	bic.w	r3, r3, #7
 800113a:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800113c:	6873      	ldr	r3, [r6, #4]
 800113e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001142:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001144:	68b3      	ldr	r3, [r6, #8]
 8001146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800114a:	60b3      	str	r3, [r6, #8]
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800114c:	f7ff fc04 	bl	8000958 <NVIC_GetPriorityGrouping>
 8001150:	f7ff fc34 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <main+0x748>)
	return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
}

static void F_LED_RGB(uint8_t Z_RED, uint8_t Z_GREEN, uint8_t Z_BLUE)
{
	led_rgb_temp = (struct s_led_rgb){
 8001156:	4e2b      	ldr	r6, [pc, #172]	; (8001204 <main+0x74c>)
 8001158:	0100      	lsls	r0, r0, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	b2c0      	uxtb	r0, r0
 8001160:	f882 030e 	strb.w	r0, [r2, #782]	; 0x30e
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001164:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001166:	f7ff fbf7 	bl	8000958 <NVIC_GetPriorityGrouping>
 800116a:	f7ff fc27 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	0100      	lsls	r0, r0, #4
 8001170:	b2c0      	uxtb	r0, r0
 8001172:	f882 030b 	strb.w	r0, [r2, #779]	; 0x30b
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001176:	f8c2 a000 	str.w	sl, [r2]
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800117a:	f7ff fbed 	bl	8000958 <NVIC_GetPriorityGrouping>
 800117e:	f7ff fc1d 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	0100      	lsls	r0, r0, #4
 8001184:	b2c0      	uxtb	r0, r0
 8001186:	f882 030f 	strb.w	r0, [r2, #783]	; 0x30f
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800118a:	6017      	str	r7, [r2, #0]
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800118c:	f7ff fbe4 	bl	8000958 <NVIC_GetPriorityGrouping>
 8001190:	f7ff fc14 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	0100      	lsls	r0, r0, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	b2c0      	uxtb	r0, r0
 800119c:	f882 0310 	strb.w	r0, [r2, #784]	; 0x310
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011a0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011a2:	f7ff fbd9 	bl	8000958 <NVIC_GetPriorityGrouping>
 80011a6:	f7ff fc09 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	0100      	lsls	r0, r0, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011ac:	2320      	movs	r3, #32
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	b2c0      	uxtb	r0, r0
 80011b0:	f882 0325 	strb.w	r0, [r2, #805]	; 0x325
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011b6:	f7ff fbcf 	bl	8000958 <NVIC_GetPriorityGrouping>
 80011ba:	f7ff fbff 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	0100      	lsls	r0, r0, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011c0:	2340      	movs	r3, #64	; 0x40
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	b2c0      	uxtb	r0, r0
 80011c4:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ca:	f7ff fbc5 	bl	8000958 <NVIC_GetPriorityGrouping>
 80011ce:	f7ff fbf5 	bl	80009bc <NVIC_EncodePriority.constprop.18>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	0100      	lsls	r0, r0, #4
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	b2c0      	uxtb	r0, r0
 80011da:	f882 031a 	strb.w	r0, [r2, #794]	; 0x31a
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011de:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80011e0:	f8d8 3000 	ldr.w	r3, [r8]
	SysTick->LOAD=72000-1;
 80011e4:	4f08      	ldr	r7, [pc, #32]	; (8001208 <main+0x750>)
 80011e6:	f8df e028 	ldr.w	lr, [pc, #40]	; 8001210 <main+0x758>
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c8 3000 	str.w	r3, [r8]
 80011f2:	e00f      	b.n	8001214 <main+0x75c>
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020058 	.word	0x40020058
 80011fc:	4002006c 	.word	0x4002006c
 8001200:	e000e100 	.word	0xe000e100
 8001204:	20000010 	.word	0x20000010
 8001208:	e000e010 	.word	0xe000e010
 800120c:	40014800 	.word	0x40014800
 8001210:	0001193f 	.word	0x0001193f
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001214:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c8 300c 	str.w	r3, [r8, #12]
	SysTick->VAL=0;
 8001220:	46a4      	mov	ip, r4
 8001222:	f04f 080a 	mov.w	r8, #10
	for(;nCount!=0;nCount--) Delay();
 8001226:	f1b8 0f00 	cmp.w	r8, #0
 800122a:	d14c      	bne.n	80012c6 <main+0x80e>
	led_rgb_temp = (struct s_led_rgb){
 800122c:	2308      	movs	r3, #8
 800122e:	9314      	str	r3, [sp, #80]	; 0x50
	  B_R++;
 8001230:	3401      	adds	r4, #1
	led_rgb_temp = (struct s_led_rgb){
 8001232:	2304      	movs	r3, #4
	  B_R++;
 8001234:	b2e4      	uxtb	r4, r4
	led_rgb_temp = (struct s_led_rgb){
 8001236:	9315      	str	r3, [sp, #84]	; 0x54
 8001238:	2310      	movs	r3, #16
 800123a:	9316      	str	r3, [sp, #88]	; 0x58
	  B_G=B_G+2;
 800123c:	0063      	lsls	r3, r4, #1
	led_rgb_temp = (struct s_led_rgb){
 800123e:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
	  B_B=B_B+3;
 8001242:	4423      	add	r3, r4
	led_rgb_temp = (struct s_led_rgb){
 8001244:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
 8001248:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 800124c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001250:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		{LED_RED,LED_GREEN,LED_BLUE} ,
		{Z_RED,Z_GREEN,Z_BLUE} };
	uint8_t z_brillo;
	uint32_t z_pin;

	for(int a=0;a<=1;a++)
 8001254:	4643      	mov	r3, r8
	{
		for(int b=a+1;b<=2;b++)
 8001256:	f103 0a01 	add.w	sl, r3, #1
 800125a:	4652      	mov	r2, sl
		{
			if(led_rgb_temp.brillo[a]>led_rgb_temp.brillo[b])				//Order from less to more brightness
 800125c:	18f1      	adds	r1, r6, r3
 800125e:	18b0      	adds	r0, r6, r2
 8001260:	f891 900c 	ldrb.w	r9, [r1, #12]
 8001264:	f890 800c 	ldrb.w	r8, [r0, #12]
 8001268:	45c1      	cmp	r9, r8
 800126a:	d913      	bls.n	8001294 <main+0x7dc>
			{
				z_brillo=led_rgb_temp.brillo[a];
 800126c:	f891 800c 	ldrb.w	r8, [r1, #12]
				z_pin=led_rgb_temp.pin[a];
 8001270:	f856 b023 	ldr.w	fp, [r6, r3, lsl #2]
				led_rgb_temp.brillo[a]=led_rgb_temp.brillo[b];
 8001274:	f890 900c 	ldrb.w	r9, [r0, #12]
 8001278:	fa5f f989 	uxtb.w	r9, r9
 800127c:	f881 900c 	strb.w	r9, [r1, #12]
				led_rgb_temp.pin[a]=led_rgb_temp.pin[b];
 8001280:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
 8001284:	f846 9023 	str.w	r9, [r6, r3, lsl #2]
				z_brillo=led_rgb_temp.brillo[a];
 8001288:	fa5f f888 	uxtb.w	r8, r8
				led_rgb_temp.brillo[b]=z_brillo;
 800128c:	f880 800c 	strb.w	r8, [r0, #12]
				led_rgb_temp.pin[b]=z_pin;
 8001290:	f846 b022 	str.w	fp, [r6, r2, lsl #2]
		for(int b=a+1;b<=2;b++)
 8001294:	3201      	adds	r2, #1
 8001296:	2a02      	cmp	r2, #2
 8001298:	d0e1      	beq.n	800125e <main+0x7a6>
 800129a:	4653      	mov	r3, sl
	for(int a=0;a<=1;a++)
 800129c:	2b02      	cmp	r3, #2
 800129e:	d1da      	bne.n	8001256 <main+0x79e>
		led_rgb_temp.brillo[a]=255-led_rgb_temp.brillo[a];
	}*/
	for(int a=1;a<3;a++)
	{
		//led_rgb_temp.brillo[a]=led_rgb_temp.brillo[a]+(255-led_rgb_temp.brillo[0]);
		led_rgb_temp.brillo[a]=led_rgb_temp.brillo[a]-(led_rgb_temp.brillo[0]);
 80012a0:	7b73      	ldrb	r3, [r6, #13]
 80012a2:	7b32      	ldrb	r2, [r6, #12]
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	7373      	strb	r3, [r6, #13]
 80012aa:	7bb3      	ldrb	r3, [r6, #14]
 80012ac:	7b32      	ldrb	r2, [r6, #12]
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	73b3      	strb	r3, [r6, #14]
	}
	//led_rgb_temp.brillo[2]=led_rgb_temp.brillo[2]+(255-led_rgb_temp.brillo[1]);
	led_rgb_temp.brillo[2]=led_rgb_temp.brillo[2]-led_rgb_temp.brillo[1];
 80012b4:	7bb3      	ldrb	r3, [r6, #14]
 80012b6:	7b72      	ldrb	r2, [r6, #13]
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73b3      	strb	r3, [r6, #14]
	new_led_rgb=TRUE;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <main+0x824>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e7ad      	b.n	8001222 <main+0x76a>
	SysTick->LOAD=72000-1;
 80012c6:	f8c7 e004 	str.w	lr, [r7, #4]
	SysTick->VAL=0;
 80012ca:	f8c7 c008 	str.w	ip, [r7, #8]
	while(SysTick->CTRL==5){}
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <main+0x828>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d0fb      	beq.n	80012ce <main+0x816>
	for(;nCount!=0;nCount--) Delay();
 80012d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80012da:	e7a4      	b.n	8001226 <main+0x76e>
 80012dc:	20000020 	.word	0x20000020
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <NMI_Handler>:
 80012e4:	4770      	bx	lr

080012e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler>

080012e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler>

080012ea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler>

080012ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler>

080012ee <SVC_Handler>:
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:
 80012f4:	4770      	bx	lr

080012f6 <DMA1_Channel1_IRQHandler>:
 80012f6:	4770      	bx	lr

080012f8 <DMA1_Channel4_IRQHandler>:
 80012f8:	4770      	bx	lr

080012fa <DMA1_Channel5_IRQHandler>:
 80012fa:	4770      	bx	lr

080012fc <DMA1_Channel6_IRQHandler>:
 80012fc:	4770      	bx	lr
	...

08001300 <TIM1_TRG_COM_TIM17_IRQHandler>:
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <TIM1_TRG_COM_TIM17_IRQHandler+0xd8>)
 8001302:	691a      	ldr	r2, [r3, #16]
* @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
*/
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM17)==TRUE)
 8001304:	07d2      	lsls	r2, r2, #31
{
 8001306:	b570      	push	{r4, r5, r6, lr}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM17)==TRUE)
 8001308:	d542      	bpl.n	8001390 <TIM1_TRG_COM_TIM17_IRQHandler+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800130a:	f06f 0201 	mvn.w	r2, #1
 800130e:	611a      	str	r2, [r3, #16]
	{
		LL_TIM_ClearFlag_UPDATE(TIM17);

		if(estado_led==2||brillado_led_rgb>=255)
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <TIM1_TRG_COM_TIM17_IRQHandler+0xdc>)
 8001312:	4833      	ldr	r0, [pc, #204]	; (80013e0 <TIM1_TRG_COM_TIM17_IRQHandler+0xe0>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2a02      	cmp	r2, #2
 8001318:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <TIM1_TRG_COM_TIM17_IRQHandler+0xe4>)
 800131a:	d002      	beq.n	8001322 <TIM1_TRG_COM_TIM17_IRQHandler+0x22>
 800131c:	6801      	ldr	r1, [r0, #0]
 800131e:	29fe      	cmp	r1, #254	; 0xfe
 8001320:	dd37      	ble.n	8001392 <TIM1_TRG_COM_TIM17_IRQHandler+0x92>
		{
			GPIOA->BSRR=LED_GREEN;			//Set_pin
 8001322:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001326:	2404      	movs	r4, #4
 8001328:	618c      	str	r4, [r1, #24]
			GPIOA->BSRR=LED_RED;			//Set_pin
 800132a:	2408      	movs	r4, #8
 800132c:	618c      	str	r4, [r1, #24]
			GPIOA->BSRR=LED_BLUE;			//Set_pin
 800132e:	2410      	movs	r4, #16
 8001330:	618c      	str	r4, [r1, #24]
			estado_led=0;
 8001332:	2100      	movs	r1, #0
			brillado_led_rgb=0;

			if(new_led_rgb==TRUE)							//Copy the new LED configuration
 8001334:	4c2c      	ldr	r4, [pc, #176]	; (80013e8 <TIM1_TRG_COM_TIM17_IRQHandler+0xe8>)
			estado_led=0;
 8001336:	6019      	str	r1, [r3, #0]
			brillado_led_rgb=0;
 8001338:	6001      	str	r1, [r0, #0]
			if(new_led_rgb==TRUE)							//Copy the new LED configuration
 800133a:	7825      	ldrb	r5, [r4, #0]
 800133c:	2d01      	cmp	r5, #1
 800133e:	d10d      	bne.n	800135c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>
			{
				new_led_rgb=FALSE;
				for(int i_a=0;i_a<3;i_a++)
				{
					led_rgb.pin[i_a]=led_rgb_temp.pin[i_a];
 8001340:	4d2a      	ldr	r5, [pc, #168]	; (80013ec <TIM1_TRG_COM_TIM17_IRQHandler+0xec>)
				new_led_rgb=FALSE;
 8001342:	7021      	strb	r1, [r4, #0]
					led_rgb.pin[i_a]=led_rgb_temp.pin[i_a];
 8001344:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8001348:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
					led_rgb.brillo[i_a]=led_rgb_temp.brillo[i_a];
 800134c:	186c      	adds	r4, r5, r1
 800134e:	1856      	adds	r6, r2, r1
 8001350:	7b24      	ldrb	r4, [r4, #12]
				for(int i_a=0;i_a<3;i_a++)
 8001352:	3101      	adds	r1, #1
					led_rgb.brillo[i_a]=led_rgb_temp.brillo[i_a];
 8001354:	b2e4      	uxtb	r4, r4
				for(int i_a=0;i_a<3;i_a++)
 8001356:	2903      	cmp	r1, #3
					led_rgb.brillo[i_a]=led_rgb_temp.brillo[i_a];
 8001358:	7334      	strb	r4, [r6, #12]
				for(int i_a=0;i_a<3;i_a++)
 800135a:	d1f3      	bne.n	8001344 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>
		{
			GPIOA->BSRR=led_rgb.pin[estado_led];			//Set_pin
			estado_led++;
		}

		if(estado_led==0)
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	b951      	cbnz	r1, 8001376 <TIM1_TRG_COM_TIM17_IRQHandler+0x76>
		{
			if(led_rgb.brillo[0]<255)
 8001360:	7b11      	ldrb	r1, [r2, #12]
 8001362:	29ff      	cmp	r1, #255	; 0xff
 8001364:	d01f      	beq.n	80013a6 <TIM1_TRG_COM_TIM17_IRQHandler+0xa6>
			{
				GPIOA->BRR=LED_GREEN;				//Clear_pin
 8001366:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800136a:	2404      	movs	r4, #4
 800136c:	628c      	str	r4, [r1, #40]	; 0x28
				GPIOA->BRR=LED_RED;					//Clear_pin
 800136e:	2408      	movs	r4, #8
 8001370:	628c      	str	r4, [r1, #40]	; 0x28
				GPIOA->BRR=LED_BLUE;				//Clear_pin
 8001372:	2410      	movs	r4, #16
			}
			else if(led_rgb.brillo[1]<255)
			{
				estado_led=1;
				GPIOA->BRR=led_rgb.pin[1];			//Clear_pin
				GPIOA->BRR=led_rgb.pin[2];			//Clear_pin
 8001374:	628c      	str	r4, [r1, #40]	; 0x28
			{
				estado_led=-1;
			}
		}

		brillado_led_rgb=brillado_led_rgb+(255-led_rgb.brillo[estado_led]);
 8001376:	6819      	ldr	r1, [r3, #0]
 8001378:	440a      	add	r2, r1
 800137a:	7b12      	ldrb	r2, [r2, #12]
 800137c:	6801      	ldr	r1, [r0, #0]
 800137e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8001382:	440a      	add	r2, r1
 8001384:	6002      	str	r2, [r0, #0]

		if(estado_led>=0)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2a00      	cmp	r2, #0
		{
			//TIM17->CNT=65535-led_rgb.brillo[estado_led];
		}
		else
		{
			estado_led=2;
 800138a:	bfbc      	itt	lt
 800138c:	2202      	movlt	r2, #2
 800138e:	601a      	strlt	r2, [r3, #0]
 8001390:	bd70      	pop	{r4, r5, r6, pc}
			GPIOA->BSRR=led_rgb.pin[estado_led];			//Set_pin
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
 8001398:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800139c:	618c      	str	r4, [r1, #24]
			estado_led++;
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	3101      	adds	r1, #1
 80013a2:	6019      	str	r1, [r3, #0]
 80013a4:	e7da      	b.n	800135c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>
			else if(led_rgb.brillo[1]<255)
 80013a6:	7b51      	ldrb	r1, [r2, #13]
 80013a8:	29ff      	cmp	r1, #255	; 0xff
 80013aa:	d007      	beq.n	80013bc <TIM1_TRG_COM_TIM17_IRQHandler+0xbc>
				estado_led=1;
 80013ac:	2101      	movs	r1, #1
 80013ae:	6019      	str	r1, [r3, #0]
				GPIOA->BRR=led_rgb.pin[1];			//Clear_pin
 80013b0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80013b4:	6854      	ldr	r4, [r2, #4]
 80013b6:	628c      	str	r4, [r1, #40]	; 0x28
				GPIOA->BRR=led_rgb.pin[2];			//Clear_pin
 80013b8:	6894      	ldr	r4, [r2, #8]
 80013ba:	e7db      	b.n	8001374 <TIM1_TRG_COM_TIM17_IRQHandler+0x74>
			else if(led_rgb.brillo[2]<255)
 80013bc:	7b91      	ldrb	r1, [r2, #14]
 80013be:	29ff      	cmp	r1, #255	; 0xff
 80013c0:	d005      	beq.n	80013ce <TIM1_TRG_COM_TIM17_IRQHandler+0xce>
				estado_led=2;
 80013c2:	2102      	movs	r1, #2
 80013c4:	6019      	str	r1, [r3, #0]
				GPIOA->BRR=led_rgb.pin[2];			//Clear_pin
 80013c6:	6894      	ldr	r4, [r2, #8]
 80013c8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80013cc:	e7d2      	b.n	8001374 <TIM1_TRG_COM_TIM17_IRQHandler+0x74>
				estado_led=-1;
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	6019      	str	r1, [r3, #0]
 80013d4:	e7cf      	b.n	8001376 <TIM1_TRG_COM_TIM17_IRQHandler+0x76>
 80013d6:	bf00      	nop
 80013d8:	40014800 	.word	0x40014800
 80013dc:	20000048 	.word	0x20000048
 80013e0:	20000044 	.word	0x20000044
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000020 	.word	0x20000020
 80013ec:	20000010 	.word	0x20000010

080013f0 <USART1_IRQHandler>:
 80013f0:	4770      	bx	lr

080013f2 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80013f2:	4770      	bx	lr

080013f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4915      	ldr	r1, [pc, #84]	; (800144c <SystemInit+0x58>)
 80013f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <SystemInit+0x5c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800140c:	6858      	ldr	r0, [r3, #4]
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <SystemInit+0x60>)
 8001410:	4002      	ands	r2, r0
 8001412:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800141a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800141e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001426:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800142e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001432:	f022 020f 	bic.w	r2, r2, #15
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001438:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <SystemInit+0x64>)
 800143c:	4002      	ands	r2, r0
 800143e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001448:	608b      	str	r3, [r1, #8]
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	40021000 	.word	0x40021000
 8001454:	f87fc00c 	.word	0xf87fc00c
 8001458:	ff00fccc 	.word	0xff00fccc

0800145c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001460:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001462:	e003      	b.n	800146c <LoopCopyDataInit>

08001464 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001466:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001468:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800146a:	3104      	adds	r1, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <LoopForever+0xa>)
	ldr	r3, =_edata
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001470:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001472:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001474:	d3f6      	bcc.n	8001464 <CopyDataInit>
	ldr	r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001478:	e002      	b.n	8001480 <LoopFillZerobss>

0800147a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800147a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800147c:	f842 3b04 	str.w	r3, [r2], #4

08001480 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <LoopForever+0x16>)
	cmp	r2, r3
 8001482:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001484:	d3f9      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001486:	f7ff ffb5 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f000 f811 	bl	80014b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148e:	f7ff fb13 	bl	8000ab8 <main>

08001492 <LoopForever>:

LoopForever:
    b LoopForever
 8001492:	e7fe      	b.n	8001492 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001494:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8001498:	08001530 	.word	0x08001530
	ldr	r0, =_sdata
 800149c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014a0:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 80014a4:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 80014a8:	2000004c 	.word	0x2000004c

080014ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_IRQHandler>
	...

080014b0 <__libc_init_array>:
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	4e0d      	ldr	r6, [pc, #52]	; (80014e8 <__libc_init_array+0x38>)
 80014b4:	4c0d      	ldr	r4, [pc, #52]	; (80014ec <__libc_init_array+0x3c>)
 80014b6:	1ba4      	subs	r4, r4, r6
 80014b8:	10a4      	asrs	r4, r4, #2
 80014ba:	2500      	movs	r5, #0
 80014bc:	42a5      	cmp	r5, r4
 80014be:	d109      	bne.n	80014d4 <__libc_init_array+0x24>
 80014c0:	4e0b      	ldr	r6, [pc, #44]	; (80014f0 <__libc_init_array+0x40>)
 80014c2:	4c0c      	ldr	r4, [pc, #48]	; (80014f4 <__libc_init_array+0x44>)
 80014c4:	f000 f818 	bl	80014f8 <_init>
 80014c8:	1ba4      	subs	r4, r4, r6
 80014ca:	10a4      	asrs	r4, r4, #2
 80014cc:	2500      	movs	r5, #0
 80014ce:	42a5      	cmp	r5, r4
 80014d0:	d105      	bne.n	80014de <__libc_init_array+0x2e>
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
 80014d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014d8:	4798      	blx	r3
 80014da:	3501      	adds	r5, #1
 80014dc:	e7ee      	b.n	80014bc <__libc_init_array+0xc>
 80014de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014e2:	4798      	blx	r3
 80014e4:	3501      	adds	r5, #1
 80014e6:	e7f2      	b.n	80014ce <__libc_init_array+0x1e>
 80014e8:	08001528 	.word	0x08001528
 80014ec:	08001528 	.word	0x08001528
 80014f0:	08001528 	.word	0x08001528
 80014f4:	0800152c 	.word	0x0800152c

080014f8 <_init>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr

08001504 <_fini>:
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	bf00      	nop
 8001508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150a:	bc08      	pop	{r3}
 800150c:	469e      	mov	lr, r3
 800150e:	4770      	bx	lr
